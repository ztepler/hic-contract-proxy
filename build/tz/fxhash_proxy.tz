{ parameter
    (or (or (unit %default)
            (pair %execute
               (lambda %lambda
                  (pair (pair (pair (pair (address %administrator) (set %coreParticipants address))
                                    (pair (bool %isPaused) (address %issuerAddress)))
                              (pair (pair (option %proposedAdministrator address) (map %shares address nat))
                                    (nat %totalShares)))
                        bytes)
                  (list operation))
               (bytes %packedParams)))
        (pair %mint_issuer
           (pair (nat %amount) (bool %enabled))
           (pair (map %metadata string bytes) (pair (mutez %price) (nat %royalties))))) ;
  storage
    (pair (pair (pair (address %administrator) (set %coreParticipants address))
                (pair (bool %isPaused) (address %issuerAddress)))
          (pair (pair (option %proposedAdministrator address) (map %shares address nat))
                (nat %totalShares))) ;
  code { LAMBDA
           (pair (pair (pair address (set address)) (pair bool address))
                 (pair (pair (option address) (map address nat)) nat))
           unit
           { CAR ;
             CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF { UNIT }
                { PUSH string "Entrypoint can call only administrator" ; FAILWITH } } ;
         LAMBDA
           (pair (pair (pair address (set address)) (pair bool address))
                 (pair (pair (option address) (map address nat)) nat))
           unit
           { CAR ;
             CDR ;
             CAR ;
             IF { PUSH string "Contract is paused" ; FAILWITH } { UNIT } } ;
         DIG 2 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DROP 3 ;
                 NIL operation ;
                 PUSH nat 0 ;
                 PUSH mutez 0 ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CDR ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        CAR ;
                        CAR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        CDR ;
                        PUSH nat 1 ;
                        DUP 4 ;
                        CAR ;
                        CAR ;
                        CDR ;
                        ADD ;
                        DUP 5 ;
                        CDR ;
                        CAR ;
                        CDR ;
                        SIZE ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        COMPARE ;
                        EQ ;
                        IF { DUP 3 ; AMOUNT ; SUB }
                           { DUP 5 ;
                             CDR ;
                             CDR ;
                             DUP 5 ;
                             CDR ;
                             CDR ;
                             AMOUNT ;
                             DUG 2 ;
                             PUSH mutez 1 ;
                             DIG 3 ;
                             EDIV ;
                             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                             CAR ;
                             MUL ;
                             EDIV ;
                             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                             CAR ;
                             PUSH mutez 1 ;
                             SWAP ;
                             MUL } ;
                        DUP 5 ;
                        CDR ;
                        CAR ;
                        CONTRACT unit ;
                        IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        UNIT ;
                        TRANSFER_TOKENS ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        DIG 5 ;
                        ADD ;
                        PUSH mutez 0 ;
                        DIG 3 ;
                        COMPARE ;
                        GT ;
                        IF { DIG 3 ; DIG 2 ; CONS } { SWAP ; DROP ; DIG 2 } ;
                        DIG 3 ;
                        CAR ;
                        DUP ;
                        CDR ;
                        DIG 4 ;
                        DIG 2 ;
                        CAR ;
                        CAR ;
                        PAIR ;
                        PAIR ;
                        CAR ;
                        CDR ;
                        DIG 2 ;
                        PAIR ;
                        PAIR } ;
                 CDR ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DUP ;
                 CDR ;
                 DUP 3 ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 SWAP ;
                 EXEC ;
                 PAIR } }
           { SWAP ;
             PUSH mutez 0 ;
             AMOUNT ;
             COMPARE ;
             EQ ;
             IF {} { PUSH string "This entrypoint should not receive tez" ; FAILWITH } ;
             DUP ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             CDR ;
             CONTRACT %mint_issuer
               (pair (pair (nat %amount) (bool %enabled))
                     (pair (map %metadata string bytes) (pair (mutez %price) (nat %royalties)))) ;
             IF_NONE { PUSH string "No issuer found" ; FAILWITH } {} ;
             PUSH mutez 0 ;
             DIG 2 ;
             TRANSFER_TOKENS ;
             SWAP ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             PAIR } } }

